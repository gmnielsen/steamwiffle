// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5265.steamwiffle;

//import org.opencv.*;
import org.usfirst.frc5265.steamwiffle.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc5265.steamwiffle.subsystems.*;
import edu.wpi.first.wpilibj.interfaces.*;
import org.usfirst.frc5265.steamwiffle.subsystems.stagValues;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

	// each button must be declared
    public JoystickButton click01;
    public Joystick steering;
    public JoystickButton plus90;
    public JoystickButton minus90;
    public JoystickButton driveTest1;
    public JoystickButton driveTest2;
    public JoystickButton driveTest3;
    public JoystickButton driveTest4;
    public JoystickButton driveTest5;
    public JoystickButton driveTest6;
    public JoystickButton driveTest7;
    public JoystickButton driveTest8;
   
    public OI() {
        
    	// construct the joystick
    	steering = new Joystick(0);
        
        // construct each button and what happens when it is used
    	/*
    	click01 = new JoystickButton(steering, 1);
        	click01.whileHeld(new dothis01());
        plus90 = new JoystickButton(steering, 8);
        	plus90.whenPressed(new buttonplus90());
        minus90 = new JoystickButton(steering, 7);
        	minus90.whenPressed(new buttonminus90());
        	*/
        driveTest1 = new JoystickButton(steering, 1);
        	driveTest1.whenPressed(new DriveByTime(stagValues.testax, stagValues.testay, stagValues.testat, stagValues.testatime));
        driveTest2 = new JoystickButton(steering, 2);
         	driveTest2.whenPressed(new DriveByTime(stagValues.testax2, stagValues.testay2, stagValues.testat2, stagValues.testatime2));	
        driveTest3 = new JoystickButton(steering, 3);
        	driveTest3.whenPressed(new DriveByTime(stagValues.testax3, stagValues.testay3, stagValues.testat3, stagValues.testatime3)); 	
        driveTest4 = new JoystickButton(steering, 4);
        	driveTest4.whenPressed(new DriveByTime(stagValues.testax4, stagValues.testay4, stagValues.testat4, stagValues.testatime4)); 	
        driveTest5 = new JoystickButton(steering, 5);
        	driveTest5.whenPressed(new DriveByTime(stagValues.testax5, stagValues.testay5, stagValues.testat5, stagValues.testatime5));
        driveTest6 = new JoystickButton(steering, 6);
        	driveTest6.whenPressed(new DriveByTime(stagValues.testax6, stagValues.testay6, stagValues.testat6, stagValues.testatime6));	
        driveTest7 = new JoystickButton(steering, 7);
        	driveTest7.whenPressed(new DriveByTime(stagValues.testax7, stagValues.testay7, stagValues.testat7, stagValues.testatime7));	
        driveTest8 = new JoystickButton(steering, 8);
        	driveTest8.whenPressed(new DriveByTime(stagValues.testax8, stagValues.testay8, stagValues.testat8, stagValues.testatime8));	
        	
        	// SmartDashboard Buttons, if we need them, go here

        //SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        //SmartDashboard.putData("dothis01", new dothis01());
        //SmartDashboard.putData("Setpoint Command 1", new SetpointCommand1());
        //SmartDashboard.putData("Timed Command 1", new TimedCommand1());
        //SmartDashboard.putData("Instant Command 1", new InstantCommand1());
        //SmartDashboard.putData("Command Group 1", new CommandGroup1());
        //SmartDashboard.putData("PID Command 1", new PIDCommand1());


    }
    
    // these methods return raw data from the joystick
    // we should probably comment out the radian vector methods, as we aren't using them
    public Joystick getsteering() {
        return steering;
    }
    public double getXSteer() {
        return steering.getX(); //look up what the actual axis number is
    }
    public double getYSteer() {
        return steering.getY(); //look up what the actual axis number is
    }
    public double getTwistSteer() {
        return steering.getTwist(); //look up what the actual axis number is
    }
    public double getPolarDegrees() {
    	return steering.getDirectionDegrees();
    }
    public double getPolarRadians() {
    	return steering.getDirectionRadians();
    }
    public double getPolarMagnitude() {
    	return steering.getMagnitude();	
    }
    public double getThrottle() {
    	return steering.getThrottle();
    }
    
}

